/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package my.appliancesInfo;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.ImageIcon;
/**
 *
 * @author utsav
 */
public class AppliancesInfo extends javax.swing.JFrame {
    
    private ArrayList <TableInfo> aList = new ArrayList();
    private boolean checkMouseClick = false; //to check if the mouse click event has been triggered or not.

    /** Creates new form AppliancesInfo */
    public AppliancesInfo() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        btnGroupRange = new javax.swing.ButtonGroup();
        jMenu1 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBooksInfo = new javax.swing.JTable();
        panelBooksInfo = new javax.swing.JPanel();
        lblPriceRange = new javax.swing.JLabel();
        cbCategory = new javax.swing.JComboBox<>();
        lblBookName = new javax.swing.JLabel();
        rbCheap = new javax.swing.JRadioButton();
        rbMedium = new javax.swing.JRadioButton();
        lblAuthor = new javax.swing.JLabel();
        tfBookName = new javax.swing.JTextField();
        tfBookId = new javax.swing.JTextField();
        tfAuthor = new javax.swing.JTextField();
        lblPrice = new javax.swing.JLabel();
        lblGenre = new javax.swing.JLabel();
        lblBookID = new javax.swing.JLabel();
        tfPrice = new javax.swing.JTextField();
        rbExpensive = new javax.swing.JRadioButton();
        panelButtons = new javax.swing.JPanel();
        btnClear = new javax.swing.JButton();
        btnAddToTable = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        panelPriceSearch = new javax.swing.JPanel();
        lblPriceSearch = new javax.swing.JLabel();
        tfPriceSearch = new javax.swing.JTextField();
        btnPriceSearch = new javax.swing.JButton();
        panelCategorySearch = new javax.swing.JPanel();
        btnCategorySearch = new javax.swing.JButton();
        cbCategorySearch = new javax.swing.JComboBox<>();
        lblGenreSearch = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuItemNew = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuItemOpenFile = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        menuItemImport = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        menuItemExport = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuItemExit = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuItemAbout = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        menuItemReadMe = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Books Information System.\n");
        setBackground(new java.awt.Color(102, 102, 255));
        setResizable(false);
        ImageIcon icon = new ImageIcon("Images/icon.jpg");
        setIconImage(icon.getImage());

        tblBooksInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Book ID", "Genre", "Book Name", "Price Range", "Price (Nrs)", "Author"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBooksInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBooksInfoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblBooksInfo);
        if (tblBooksInfo.getColumnModel().getColumnCount() > 0) {
            tblBooksInfo.getColumnModel().getColumn(0).setResizable(false);
            tblBooksInfo.getColumnModel().getColumn(0).setPreferredWidth(10);
            tblBooksInfo.getColumnModel().getColumn(1).setResizable(false);
            tblBooksInfo.getColumnModel().getColumn(1).setPreferredWidth(100);
            tblBooksInfo.getColumnModel().getColumn(2).setResizable(false);
            tblBooksInfo.getColumnModel().getColumn(3).setResizable(false);
            tblBooksInfo.getColumnModel().getColumn(4).setResizable(false);
            tblBooksInfo.getColumnModel().getColumn(5).setResizable(false);
        }
        tblBooksInfo.setRowHeight(28);

        panelBooksInfo.setBackground(new java.awt.Color(211, 211, 211));
        panelBooksInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Form:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Tahoma", 1, 16), new java.awt.Color(255, 0, 0))); // NOI18N
        panelBooksInfo.setFocusCycleRoot(true);

        lblPriceRange.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblPriceRange.setText("Price Range :");

        cbCategory.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        cbCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "      --  Choose an option  --", "Comic Book or Graphic Novel", "Action and Adventure", "Detective and Mystery", "Suspense and Thrillers", "Science Fiction (Sci-Fi)" }));
        

        lblBookName.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblBookName.setText("Book Name :");

        btnGroupRange.add(rbCheap);
        rbCheap.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        rbCheap.setText("Cheap");
        rbCheap.setEnabled(false);

        btnGroupRange.add(rbMedium);
        rbMedium.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        rbMedium.setText("Medium");
        rbMedium.setEnabled(false);

        lblAuthor.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblAuthor.setText("Author :");

        
        tfBookId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfBookIdKeyTyped(evt);
            }
        });

        lblPrice.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblPrice.setText(" Price :");

        lblGenre.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblGenre.setText("Genre :");

        lblBookID.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblBookID.setText("Book ID :");

        tfPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfPriceKeyTyped(evt);
            }
        });

        btnGroupRange.add(rbExpensive);
        rbExpensive.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        rbExpensive.setText("Expensive");
        rbExpensive.setEnabled(false);

        panelButtons.setBackground(new java.awt.Color(255, 255, 255));
        panelButtons.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnClear.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnAddToTable.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        btnAddToTable.setText("Add to Table");
        btnAddToTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToTableActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        btnUpdate.setText("Update Table");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelButtonsLayout = new javax.swing.GroupLayout(panelButtons);
        panelButtons.setLayout(panelButtonsLayout);
        panelButtonsLayout.setHorizontalGroup(
            panelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAddToTable)
                .addGap(46, 46, 46)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(btnUpdate)
                .addContainerGap())
        );
        panelButtonsLayout.setVerticalGroup(
            panelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelButtonsLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(panelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddToTable, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelBooksInfoLayout = new javax.swing.GroupLayout(panelBooksInfo);
        panelBooksInfo.setLayout(panelBooksInfoLayout);
        panelBooksInfoLayout.setHorizontalGroup(
            panelBooksInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBooksInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBooksInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBooksInfoLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(panelBooksInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblBookName)
                            .addComponent(lblBookID, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(57, 57, 57)
                        .addGroup(panelBooksInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfBookName, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                            .addComponent(tfPrice)
                            .addComponent(tfAuthor)
                            .addComponent(tfBookId)))
                    .addGroup(panelBooksInfoLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(lblPrice))
                    .addGroup(panelBooksInfoLayout.createSequentialGroup()
                        .addGroup(panelBooksInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblPriceRange)
                            .addComponent(lblAuthor)
                            .addComponent(lblGenre))
                        .addGap(60, 60, 60)
                        .addGroup(panelBooksInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelBooksInfoLayout.createSequentialGroup()
                                .addComponent(rbCheap)
                                .addGap(18, 18, 18)
                                .addComponent(rbMedium)
                                .addGap(18, 18, 18)
                                .addComponent(rbExpensive))
                            .addComponent(cbCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(panelButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelBooksInfoLayout.setVerticalGroup(
            panelBooksInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBooksInfoLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panelBooksInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfBookId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBookID))
                .addGap(40, 40, 40)
                .addGroup(panelBooksInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfBookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBookName))
                .addGap(40, 40, 40)
                .addGroup(panelBooksInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrice)
                    .addComponent(tfPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(panelBooksInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAuthor))
                .addGap(40, 40, 40)
                .addGroup(panelBooksInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbCheap)
                    .addComponent(rbMedium)
                    .addComponent(rbExpensive)
                    .addComponent(lblPriceRange))
                .addGap(40, 40, 40)
                .addGroup(panelBooksInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGenre))
                .addGap(35, 35, 35)
                .addComponent(panelButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelPriceSearch.setBackground(new java.awt.Color(211, 211, 211));
        panelPriceSearch.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Search Book Details by Price:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Tahoma", 1, 16), new java.awt.Color(255, 0, 0))); // NOI18N

        lblPriceSearch.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblPriceSearch.setText("Price :");

        tfPriceSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfPriceSearchKeyTyped(evt);
            }
        });

        btnPriceSearch.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        btnPriceSearch.setText("Search");
        btnPriceSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPriceSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelPriceSearchLayout = new javax.swing.GroupLayout(panelPriceSearch);
        panelPriceSearch.setLayout(panelPriceSearchLayout);
        panelPriceSearchLayout.setHorizontalGroup(
            panelPriceSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPriceSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPriceSearch)
                .addGap(108, 108, 108)
                .addComponent(tfPriceSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addComponent(btnPriceSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
        );
        panelPriceSearchLayout.setVerticalGroup(
            panelPriceSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPriceSearchLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(panelPriceSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPriceSearch)
                    .addComponent(btnPriceSearch)
                    .addComponent(tfPriceSearch))
                .addContainerGap())
        );

        panelCategorySearch.setBackground(new java.awt.Color(211, 211, 211));
        panelCategorySearch.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Search Books Count on the basis of Category:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Tahoma", 1, 16), new java.awt.Color(255, 0, 0))); // NOI18N

        btnCategorySearch.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        btnCategorySearch.setText("Search");
        btnCategorySearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCategorySearchActionPerformed(evt);
            }
        });

        cbCategorySearch.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        cbCategorySearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "      -- Choose an option --", "Comic Book or Graphic Novel", "Action and Adventure", "Detective and Mystery", "Suspense and Thrillers", "Science Fiction (Sci-Fi)" }));
        
        lblGenreSearch.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblGenreSearch.setText("Genre :");

        javax.swing.GroupLayout panelCategorySearchLayout = new javax.swing.GroupLayout(panelCategorySearch);
        panelCategorySearch.setLayout(panelCategorySearchLayout);
        panelCategorySearchLayout.setHorizontalGroup(
            panelCategorySearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCategorySearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblGenreSearch)
                .addGap(104, 104, 104)
                .addComponent(cbCategorySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCategorySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );
        panelCategorySearchLayout.setVerticalGroup(
            panelCategorySearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCategorySearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCategorySearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGenreSearch)
                    .addComponent(cbCategorySearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCategorySearch))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        lblTitle.setText("Books Information System");

        btnExit.setBackground(new java.awt.Color(102, 102, 102));
        btnExit.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnExit.setText("Exit System");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jMenuBar.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 102, 102)));

        menuFile.setText("File");

        menuItemNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuItemNew.setText("New");
        menuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNewActionPerformed(evt);
            }
        });
        menuFile.add(menuItemNew);
        menuFile.add(jSeparator1);

        menuItemOpenFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuItemOpenFile.setText("Open ");
        menuItemOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemOpenFileActionPerformed(evt);
            }
        });
        menuFile.add(menuItemOpenFile);
        menuFile.add(jSeparator3);

        menuItemImport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        menuItemImport.setText("Import");
        menuItemImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemImportActionPerformed(evt);
            }
        });
        menuFile.add(menuItemImport);
        menuFile.add(jSeparator4);

        menuItemExport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuItemExport.setText("Export");
        menuItemExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExportActionPerformed(evt);
            }
        });
        menuFile.add(menuItemExport);
        menuFile.add(jSeparator2);

        menuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        menuItemExit.setText("Exit");
        menuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExitActionPerformed(evt);
            }
        });
        menuFile.add(menuItemExit);

        jMenuBar.add(menuFile);

        menuHelp.setText("Help");

        menuItemAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        menuItemAbout.setText("About");
        menuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAboutActionPerformed(evt);
            }
        });
        menuHelp.add(menuItemAbout);
        menuHelp.add(jSeparator5);

        menuItemReadMe.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        menuItemReadMe.setText("Read Me");
        menuItemReadMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemReadMeActionPerformed(evt);
            }
        });
        menuHelp.add(menuItemReadMe);

        jMenuBar.add(menuHelp);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelBooksInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelPriceSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)
                            .addComponent(panelCategorySearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(392, 392, 392)
                        .addComponent(lblTitle)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(528, 528, 528)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitle)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(34, 34, 34)
                        .addComponent(panelPriceSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(panelCategorySearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelBooksInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(1267, 794));
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void menuItemExitActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        btnExitActionPerformed(evt);
    }                                            

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        tfBookId.setText("");
        tfBookName.setText("");
        tfPrice.setText("");
        tfAuthor.setText("");
        cbCategory.setSelectedIndex(0);
        btnGroupRange.clearSelection();
        tblBooksInfo.clearSelection();
        tfPriceSearch.setText("");
        cbCategorySearch.setSelectedIndex(0);
        tfBookId.setEditable(true);
        checkMouseClick = false;
    }                                        

    private void menuItemNewActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        btnClearActionPerformed(evt);
        
        for(int i = 0; i < tblBooksInfo.getRowCount(); i++){
            for(int j = 0; j<6; j++){
                tblBooksInfo.setValueAt("",i,j);
            }
        }
        aList.clear();
    }                                           

    private void btnAddToTableActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        try{
            String bookId = tfBookId.getText().trim();
            String bookName = tfBookName.getText().trim();
            String priceStr = tfPrice.getText().trim();
            String author = tfAuthor.getText().trim();
            String range = "";
            System.out.print(priceStr);
            
            if (!(priceStr.isEmpty()) && (!(rbCheap.isSelected()) && !(rbMedium.isSelected()) && !(rbExpensive.isSelected()))){
                JOptionPane.showMessageDialog(rootPane, "Price can not be 0.\nPlease re-enter the price.", "ERROR!!", 0);
                return;
            }
            if (bookId.isEmpty() || bookName.isEmpty() || priceStr.isEmpty() || author.isEmpty() || (!(rbCheap.isSelected()) && !(rbMedium.isSelected()) && !(rbExpensive.isSelected()) ) || cbCategory.getSelectedIndex() == 0){
                JOptionPane.showMessageDialog(rootPane, "Please fill all the fields", "ERROR!!", 0);
            }
            else{
                if(rbCheap.isSelected()){
                    range = rbCheap.getText();
                }else if(rbMedium.isSelected()){
                    range = rbMedium.getText();
                }else if(rbExpensive.isSelected()){
                    range = rbExpensive.getText();
                }
                
                String genre = (String)cbCategory.getSelectedItem();
                
                int rowCount = tblBooksInfo.getRowCount();
                int nextRow = 0;
                boolean emptyRowFlag = false;
                String data;
                String [] info = {bookId, genre, bookName, range, priceStr, author};
                int price = Integer.parseInt(priceStr);
                TableInfo obj = new TableInfo(bookId, genre, bookName, range, price, author);
                
                
                
                do{
                    data = (String)tblBooksInfo.getValueAt(nextRow, 0);
                    
                    if(data != null && data.length() != 0){
                        nextRow++;
                    }else{
                        emptyRowFlag = true;
                    }
                }while(nextRow < rowCount && !emptyRowFlag);
                    
                //for unique book ID
                if(nextRow != 0){
                    for (TableInfo s : aList){
                        if(s.getBookId().equals(tfBookId.getText().trim())){
                            JOptionPane.showMessageDialog(rootPane, "Please enter unique BookId", "Error", 0);
                            return;
                        }
                    }
                }
                
                    
                int columnCount = tblBooksInfo.getColumnCount();
                if(rowCount > nextRow){
                    for(int i = 0; i < columnCount; i++){
                        tblBooksInfo.setValueAt(info[i], nextRow, i);
                        btnClearActionPerformed(evt);
                    }
                    aList.add(obj);
                }else{
                    JOptionPane.showMessageDialog(rootPane, "The table has no empty row.", "Error", 0);
                }
            }
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(rootPane, "Enter Appropriate Data", "ERROR!!", 0);
        }
    }                                             

    private void tfBookIdKeyTyped(java.awt.event.KeyEvent evt) {                                  
        // TODO add your handling code here:
        char key = evt.getKeyChar();
        if (!(key >= '0' && key <= '9')){
            evt.consume();
        }
    }                                 

    private void tfPriceKeyTyped(java.awt.event.KeyEvent evt) {                                 
        // TODO add your handling code here:
        try{    
            char key = evt.getKeyChar();

            if(key == evt.VK_BACK_SPACE){  
                    tfPrice.setText("");
                    btnGroupRange.clearSelection();
                    return;
            }

            if(!(key >= '0' && key <= '9')){
               evt.consume();
            }
            else{
                
                String price = tfPrice.getText().trim()+key;
                int price_ = Integer.parseInt(price);

                if (price_ > 0 && price_ <= 500 ){
                    rbCheap.setSelected(true);
                }else if (price_ > 500 && price_ <= 5000 ){
                    rbMedium.setSelected(true);
                }else if (price_ > 5000 ){
                    rbExpensive.setSelected(true);
                }

            }
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(rootPane, "The price of the book is not realistic.\nPlease enter realistic price.", "ERROR!!", 0);
            tfPrice.setText("");
            evt.setKeyChar('\0');

        }
        
    }                                

    
    private void tblBooksInfoMouseClicked(java.awt.event.MouseEvent evt) {                                          
        // TODO add your handling code here:
        try{
            checkMouseClick = true;
            tfBookId.setEditable(false);
            int rowClicked = tblBooksInfo.getSelectedRow();
            
            if(tblBooksInfo.getValueAt(rowClicked, 0).toString().isEmpty()){
                JOptionPane.showMessageDialog(rootPane, "The selected row is empty", "ERROR!!", 0);
                tfBookId.setText("");
                tfBookName.setText("");
                tfPrice.setText("");
                tfAuthor.setText("");
                cbCategory.setSelectedIndex(0);
                btnGroupRange.clearSelection();
                tblBooksInfo.clearSelection();
                tfBookId.setEditable(true);
                checkMouseClick = false;
                return;
            }

            tfBookId.setText(tblBooksInfo.getValueAt(rowClicked, 0).toString());
            tfBookName.setText(tblBooksInfo.getValueAt(rowClicked, 2).toString());
            cbCategory.setSelectedItem(tblBooksInfo.getValueAt(rowClicked, 1).toString());
            tfPrice.setText(tblBooksInfo.getValueAt(rowClicked, 4).toString());
            tfAuthor.setText(tblBooksInfo.getValueAt(rowClicked, 5).toString());
            if((tblBooksInfo.getValueAt(rowClicked, 3).toString().toLowerCase()).equals("cheap")){
                rbCheap.setSelected(true);
            }else if((tblBooksInfo.getValueAt(rowClicked, 3).toString().toLowerCase()).equals("medium")){
                rbMedium.setSelected(true);
            }else if((tblBooksInfo.getValueAt(rowClicked, 3).toString().toLowerCase()).equals("expensive")){
                rbExpensive.setSelected(true);
            }
            
        }catch(NullPointerException e ){
            JOptionPane.showMessageDialog(rootPane, "The selected row is empty", "ERROR!!", 0);
            tfBookId.setText("");
            tfBookName.setText("");
            tfPrice.setText("");
            tfAuthor.setText("");
            cbCategory.setSelectedIndex(0);
            btnGroupRange.clearSelection();
            tblBooksInfo.clearSelection();
            tfBookId.setEditable(true);
            checkMouseClick = false;
        }catch (ArrayIndexOutOfBoundsException e){}
    }                                         

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        if(checkMouseClick){
            tfBookId.setEditable(true);
            if (tfBookId.getText().trim().isEmpty() || tfBookName.getText().trim().isEmpty() || tfPrice.getText().trim().isEmpty() || tfAuthor.getText().trim().isEmpty() 
                    || (!(rbCheap.isSelected()) && !(rbMedium.isSelected()) && !(rbExpensive.isSelected()) ) || cbCategory.getSelectedIndex() == 0){
                    JOptionPane.showMessageDialog(rootPane, "Please fill all the fields", "ERROR!!", 0);
                    tfBookId.setEditable(false);
                    return;
            
            }
            
            String bookId = tblBooksInfo.getValueAt(tblBooksInfo.getSelectedRow(), 0).toString();
            String priceRange= "";

            tblBooksInfo.setValueAt(tfBookId.getText(), tblBooksInfo.getSelectedRow(), 0);
            tblBooksInfo.setValueAt(cbCategory.getSelectedItem(), tblBooksInfo.getSelectedRow(), 1);
            tblBooksInfo.setValueAt(tfBookName.getText(), tblBooksInfo.getSelectedRow(), 2);
            tblBooksInfo.setValueAt(tfPrice.getText(), tblBooksInfo.getSelectedRow(), 4);
            tblBooksInfo.setValueAt(tfAuthor.getText(), tblBooksInfo.getSelectedRow(), 5);
            if(rbCheap.isSelected()){
                tblBooksInfo.setValueAt(rbCheap.getText(), tblBooksInfo.getSelectedRow(), 3);
                priceRange = rbCheap.getText();
            }else if(rbMedium.isSelected()){
                tblBooksInfo.setValueAt(rbMedium.getText(), tblBooksInfo.getSelectedRow(), 3);
                priceRange = rbMedium.getText();
            }if(rbExpensive.isSelected()){
                tblBooksInfo.setValueAt(rbExpensive.getText(), tblBooksInfo.getSelectedRow(), 3);
                priceRange = rbExpensive.getText();
            }
            
            int b;
            b = Integer.parseInt(tfPrice.getText());
            for(TableInfo a : aList){
                if(a.getBookId().equals(bookId)){
                    a.setBookId(tfBookId.getText());
                    a.setBookName(tfBookName.getText());
                    a.setGenre((String)cbCategory.getSelectedItem());
                    a.setPrice(b);
                    a.setAuthor(tfAuthor.getText());
                    a.setPriceRange(priceRange);
                }                
                tblBooksInfo.clearSelection();
            }
            btnClearActionPerformed(evt);
        }else{
            JOptionPane.showMessageDialog(rootPane, "No row selected", "ERROR!!", 0);
        }
                
    }                                         

    private void menuItemOpenFileActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
        try{
            File file = new File("Abstract of the project.pdf");
            String filePath = file.getAbsolutePath();
            Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler " + filePath);
            
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "Error", "ERROR!!", 0);
        }
    }                                                

    private void btnCategorySearchActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // TODO add your handling code here:
        if(cbCategorySearch.getSelectedIndex() != 0){
            if (aList.size() > 0 ){
                if (cbCategorySearch.getSelectedIndex() > 0){
                    String genre = (String)cbCategorySearch.getSelectedItem();
                    int count = 0;
                    ArrayList <String> name = new ArrayList();
                    for(TableInfo a : aList){
                        if(genre.equals(a.getGenre())){
                            name.add(a.getBookName());
                            count++;
                        }
                    }
                    if(count > 0){
                        JOptionPane.showMessageDialog(rootPane,"Total Available books of " + genre + " genre: " + count 
                                + "\n\nName of Books : \n" + Arrays.toString(name.toArray()), "Info", 1);
                    }
                    else{
                        JOptionPane.showMessageDialog(rootPane, "There is no book of " + genre + " genre.", "Info", 1);
                    }
                }
            }else{
                JOptionPane.showMessageDialog(rootPane, "The table is empty", "ERROR!!", 0);
            }
        } else{
                JOptionPane.showMessageDialog(rootPane, "Please choose a genre", "ERROR!!", 0);
        }
        cbCategorySearch.setSelectedIndex(0);
    }                                                 

    private void selectionSort(){
        if (aList.size() > 1) {
           
            for (int i = 0; i < aList.size() -1; i++){
                int minPos = i;
                for (int j = i+1; j < aList.size(); j++){
                    if(aList.get(j).getPrice() < aList.get(minPos).getPrice()){
                        minPos = j;
                    }
                }
                //swapping element
                TableInfo temp = aList.get(i);
                aList.set(i, aList.get(minPos));
                aList.set(minPos, temp);
                
            }
        }
    }
    
    private int binarySearch(ArrayList <TableInfo> aList, int low, int high, int price){
        if (aList.size() != 0){
            
            selectionSort();
            
            if(low<=high){
                int mid = (low + high)/2;
                if(aList.get(mid).getPrice() == price){
                    return mid;
                } else if(aList.get(mid).getPrice() > price){
                    return binarySearch(aList, low, mid-1, price);
                } else{
                    return binarySearch(aList, mid+1, high, price);
                }
            } else{
                return -1;
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "The table is empty", "ERROR!!", 0);
            return -2;
        }
    }
    
    private void btnPriceSearchActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
        if (tfPriceSearch.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "Please fill the firm", "ERROR!!", 0);
        } else {
            int price = Integer.parseInt(tfPriceSearch.getText().trim());
            int index = binarySearch(aList, 0, aList.size()-1, price);

            if(index == -1){
                JOptionPane.showMessageDialog(rootPane, "Sorry \n No item found", "Info", 1);
            } else if (index > -1 ){
                JOptionPane.showMessageDialog(rootPane, "Book ID: " + aList.get(index).getBookId()+ "\nBook Name: " + aList.get(index).getBookName() + 
                    "\nGenre: " + aList.get(index).getGenre() +  "\nAuther: " + aList.get(index).getAuthor() + "\nPrice Range: " + aList.get(index).getPriceRange() + 
                    "\nPrice: "+ aList.get(index).getPrice(), "Info", 1);
            }
        }
        tfPriceSearch.setText(""); 
    }                                              

    private void tfPriceSearchKeyTyped(java.awt.event.KeyEvent evt) {                                       
        // TODO add your handling code here:
        char key = evt.getKeyChar();

        if(!(key >= '0' && key <= '9')){
               evt.consume();
        }
    }                                      
  
    private void menuItemImportActionPerformed(java.awt.event.ActionEvent evt) {                                               
        try {
            // TODO add your handling code here: 
            menuItemNewActionPerformed(evt);
            JFileChooser chooser = new JFileChooser();
            chooser.setDialogTitle("Import a File");
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int result = chooser.showOpenDialog(this);
            File file = chooser.getSelectedFile();
            
            if(file == null){
                return;
            }
            if (result == JFileChooser.APPROVE_OPTION){
                
                String path = file.getAbsolutePath();
                String [] value = new String[6];
                BufferedReader br = new BufferedReader(new FileReader(path));
                
                String row = "";       
                while((row = br.readLine()) != null){
                    
                    value = row.split(",");
                    
                    if (value.length > 6){
                        JOptionPane.showMessageDialog(rootPane, "The number of coulmn in the file is more than that of table. \nPlease check the file before importing. ", "ERROR!!", 0);
                        return;
                    }
                    if (value[0].trim().isEmpty() || value[1].trim().isEmpty() || value[2].trim().isEmpty() || value[3].trim().isEmpty() || 
                            value[4].trim().isEmpty() || value[5].trim().isEmpty()){
                        JOptionPane.showMessageDialog(rootPane, "Inappropriate value!! \n\nEmpty values found", "ERROR!!", 1);
                        return;
                    }
                    
                    
                    try{
                        int bookIDCheck = Integer.parseInt(value[0]);
                        
                        
                        for(TableInfo a : aList){
                            if(a.getBookId().equals(value[0])){
                                aList.clear();
                                JOptionPane.showMessageDialog(rootPane, "The book id in the file is not unique. \nPlease check the file before importing. ", "ERROR!!", 0);
                                return;
                            }
                        }
                        aList.add(new TableInfo(value[0], value[1], value[2], value[3], Integer.parseInt(value[4]), value[5]));
                        
                        
                    } catch (NumberFormatException e){
                        JOptionPane.showMessageDialog(rootPane, "Inappropriate data type!! \n\nBookID and price can have numerical values only.", "ERROR!!", 1);
                        return;
                    }   
                }
                
                if (aList.size() > 12){
                    JOptionPane.showMessageDialog(rootPane, "The number of row in the file is more than the capacity of table i.e 12. \nPlease check the file before importing. ", "ERROR!!", 1);
                    aList.clear();
                    return;
                }
                
                for (int i = 0; i < aList.size(); i++){
                    
                    tblBooksInfo.setValueAt(aList.get(i).getBookId(),i,0);
                    tblBooksInfo.setValueAt(aList.get(i).getGenre(),i,1);
                    tblBooksInfo.setValueAt(aList.get(i).getBookName(),i,2);
                    tblBooksInfo.setValueAt(aList.get(i).getPriceRange(),i,3);
                    tblBooksInfo.setValueAt(aList.get(i).getPrice(),i,4);
                    tblBooksInfo.setValueAt(aList.get(i).getAuthor(),i,5); 
                }
                      
                
                if(aList.size() == 0){
                    JOptionPane.showMessageDialog(rootPane, "The file is empty.", "ERROR!!", 0);
                    return;
                }
            }
                
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(rootPane, ex, "ERROR!!", 0);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, ex, "ERROR!!", 0);            
        } catch (ArrayIndexOutOfBoundsException e){
            JOptionPane.showMessageDialog(rootPane, "Wrong File Type!! \nPlease choose CSV File.", "ERROR!!", 0);
        }
        
        
    }                                              

    private void menuItemExportActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
        try{
            JFileChooser fc = new JFileChooser();
            fc.setDialogTitle("Save a File");
            fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV Files (*csv)", "csv");
            fc.setFileFilter(filter);
            int result = fc.showSaveDialog(this);
            File file = fc.getSelectedFile();
            if(file == null){
                return;
            }
            
            if (result == JFileChooser.APPROVE_OPTION){
                FileWriter wr = new FileWriter(file);
                for(TableInfo t : aList){
                    String [] value = {t.getBookId(), t.getGenre(), t.getBookName(), t.getPriceRange(), String.valueOf(t.getPrice()), t.getAuthor()};
                    for(int i = 0;  i < value.length; i++){
                        wr.append(value[i]);
                        if(i == value.length-1){
                            break;
                        }
                        wr.append(",");
                    }
                    wr.append("\n");
                }
                wr.flush(); 
                wr.close();
                JOptionPane.showMessageDialog(rootPane, "Export Successful.", "Info", 1);
            }
        } catch (IOException e){
            JOptionPane.showMessageDialog(rootPane, "You can only save CSV file.", "ERROR!!", 0);
        }
    }                                              

    private void menuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(rootPane, "Name: Book Info \nVersion: 1.0.1 \nDeveopers: \nUtsav Dhungana \nJenish Basnet \nNagendra Thakur \nAbhinab Shrestha", "Info", 1);
    }                                             

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        System.exit(0);
    }                                       

    private void menuItemReadMeActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
        try{
            File file = new File("User-Manual.pdf");
            String filePath = file.getAbsolutePath();
            Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler " + filePath);
            
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "Error", "ERROR!!", 0);
        }
    }                                              

    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppliancesInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnAddToTable;
    private javax.swing.JButton btnCategorySearch;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnExit;
    private javax.swing.ButtonGroup btnGroupRange;
    private javax.swing.JButton btnPriceSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbCategory;
    private javax.swing.JComboBox<String> cbCategorySearch;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JLabel lblAuthor;
    private javax.swing.JLabel lblBookID;
    private javax.swing.JLabel lblBookName;
    private javax.swing.JLabel lblGenre;
    private javax.swing.JLabel lblGenreSearch;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblPriceRange;
    private javax.swing.JLabel lblPriceSearch;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuItemAbout;
    private javax.swing.JMenuItem menuItemExit;
    private javax.swing.JMenuItem menuItemExport;
    private javax.swing.JMenuItem menuItemImport;
    private javax.swing.JMenuItem menuItemNew;
    private javax.swing.JMenuItem menuItemOpenFile;
    private javax.swing.JMenuItem menuItemReadMe;
    private javax.swing.JPanel panelBooksInfo;
    private javax.swing.JPanel panelButtons;
    private javax.swing.JPanel panelCategorySearch;
    private javax.swing.JPanel panelPriceSearch;
    private javax.swing.JRadioButton rbCheap;
    private javax.swing.JRadioButton rbExpensive;
    private javax.swing.JRadioButton rbMedium;
    private javax.swing.JTable tblBooksInfo;
    private javax.swing.JTextField tfAuthor;
    private javax.swing.JTextField tfBookId;
    private javax.swing.JTextField tfBookName;
    private javax.swing.JTextField tfPrice;
    private javax.swing.JTextField tfPriceSearch;
    // End of variables declaration                   

}
